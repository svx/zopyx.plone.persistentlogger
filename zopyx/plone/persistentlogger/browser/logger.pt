<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      lang="en"
      metal:use-macro="context/main_template/macros/master"
      i18n:domain="zopyx.plone.persistentlogger">
<body>

<metal:main fill-slot="content-core">
    <metal:content-core define-macro="content-core"
        tal:define="toLocalizedTime nocall:context/@@plone/toLocalizedTime">

      <h2 i18n:translate="">Logging</h2>

      <div id="myGrid" style="height: 500px;" class="ag-fresh"></div>

      <a tal:attributes="href string:${context/absolute_url}/@@persistent-log-clear" 
          i18n:translate="">Clear log entries</a>

      <script type="text/javascript" tal:attributes="src string:$portal_url/++resource++zopyx.plone.persistentlogger/ag-grid/dist/ag-grid.js"></script>
      <script type="text/javascript" tal:attributes="src string:$portal_url/++resource++zopyx.plone.persistentlogger/moment.js"></script>

      <script type="text/javascript" tal:content="string: URL = '${context/absolute_url}'"></script>

      <script type="text/javascript">

        /* all table entries */
        var DATA = new Array();
        var allOfTheData;

        function date_renderer(params) {
            var date = moment(params.value);
            return date.format('YYYY-MM-DD hh:mm:ss');
        }
        function level_renderer(params) {
            return params.value;
        }
        function username_renderer(params) {
            return params.value;
        }
        function comment_renderer(params) {
            return params.value;
        }
        function details_renderer(params) {
            var details = params.value;
            return '<pre>' + details + '</pre>';
        }

        function refresh_table() {
            get_data();
            setRowData(DATA);
            gridOptions.api.sizeColumnsToFit();
        }

        function setRowData(rowData) {
            allOfTheData = rowData;
            createNewDatasource();
        }

        function createNewDatasource() {
            if (!allOfTheData) {
                // in case user selected 'onPageSizeChanged()' before the json was loaded
                return;
            }

            var dataSource = {
                //rowCount: ???, - not setting the row count, infinite paging will be used
                pageSize: pageSize, // changing to number, as scope keeps it as a string
                getRows: function (params) {
                    // this code should contact the server for rows. however for the purposes of the demo,
                    // the data is generated locally, a timer is used to give the experience of
                    // an asynchronous call
                    console.log('asking for ' + params.startRow + ' to ' + params.endRow);
                    setTimeout( function() {
                        // take a chunk of the array, matching the start and finish times
                        var rowsThisPage = allOfTheData.slice(params.startRow, params.endRow);
                        // see if we have come to the last page. if we have, set lastRow to
                        // the very last row of the last page. if you are getting data from
                        // a server, lastRow could be returned separately if the lastRow
                        // is not in the current page.
                        var lastRow = -1;
                        if (allOfTheData.length <= params.endRow) {
                            lastRow = allOfTheData.length;
                        }
                        params.successCallback(rowsThisPage, lastRow);
                    }, 500);
                }
            };

            gridOptions.api.setDatasource(dataSource);
        }

        function get_data(filter) {
            var url = URL + "/@@logger-entries";
            if (DATA.length == 0) {
                $.ajax({
                    url: url,
                    dataType: 'json',
                    async: false,
                    method: 'GET',
                    success: function(result) {
                        DATA = result;
                    } 
                });
            }
        }

        var columnDefs = [
            { headerName: "Date", 
              field: 'date',
              width: 100, 
              cellRenderer: date_renderer,
              filter: 'text',
              suppressFilter: true
            },
            { headerName: "Level",
              field: 'level', 
              width: 60, 
              cellClass: ['cell-center'],
              cellRenderer: level_renderer,
              suppressFilter: false
            },
            { headerName: "Username",
              field: 'username', 
              width: 70, 
              cellClass: ['cell-center'],
              cellRenderer: username_renderer,
              suppressFilter: false
            },
            { headerName: "Comment", 
              field: 'comment',
              width: 200, 
              cellClass: ['cell-center'],
              cellRenderer: comment_renderer,
              suppressFilter: false
            },
            { headerName: "Details", 
              field: 'details',
              width: 400, 
              cellClass: ['cell-center'],
              cellRenderer: details_renderer,
              suppressFilter: true
            },
        ];


        var pageSize = 200;

        var localeText = {

        };

        var gridOptions = {
            // note - we do not set 'virtualPaging' here, so the grid knows we are doing standard paging
            enableSorting: true,
            enableFilter: true,
            enableColResize: true,
            columnDefs: columnDefs,
            rowModelType: 'pagination',
            rowHeight: 40,
            localeText: localeText
        };

        $(document).ready(function() {
            var eGridDiv = document.querySelector('#myGrid');
            new agGrid.Grid(eGridDiv, gridOptions);
            refresh_table();
        });
      </script>

  </metal:content-core>
</metal:main>

</body>
</html>

